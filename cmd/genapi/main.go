package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"os/user"
	"path"
	"strings"
	"text/template"
)

const genmsg = "// Code generated by genapi, which is a API generation tool for Gorgonia. DO NOT EDIT."

const (
	unaryOps = "operatorPointwise_unary_const.go"
	unaryOut = "api_gen.go"
)

var (
	gopath, gorgonialoc string
)

var funcmap = template.FuncMap{
	"lower": strings.ToLower,
}

var unaryTemplate *template.Template

const unaryTemplateRaw = ` // {{.FnName}} performs a pointwise {{lower .FnName}}.
func {{.FnName}}(a *Node) (*Node, error) { return unaryOpNode(newElemUnaryOp({{.OpType}}, a), a) }
`

func init() {
	gopath = os.Getenv("GOPATH")
	// now that go can have a default gopath, this checks that path
	if gopath == "" {
		usr, err := user.Current()
		if err != nil {
			log.Fatal(err)
		}
		gopath = path.Join(usr.HomeDir, "go")
		stat, err := os.Stat(gopath)
		if err != nil {
			log.Fatal(err)
		}
		if !stat.IsDir() {
			log.Fatal("You need to define a $GOPATH")
		}
	}
	gorgonialoc = path.Join(gopath, "src/gorgonia.org/gorgonia")
	unaryTemplate = template.Must(template.New("Unary").Funcs(funcmap).Parse(unaryTemplateRaw))
}

func generateUnary() {
	// parse operator_unary_const.go
	filename := path.Join(gorgonialoc, unaryOps)
	fset := token.NewFileSet()
	file, err := parser.ParseFile(fset, filename, nil, parser.AllErrors)
	if err != nil {
		log.Fatal(err)
	}

	var unaryNames []string
	for i, decl := range file.Decls {
		log.Printf("DECL %d: %T", i, decl)
		switch d := decl.(type) {
		case *ast.GenDecl:
			if d.Tok.IsKeyword() && d.Tok.String() == "const" {
				log.Printf("\t%v", d.Tok.String())

				// get the type
				if len(d.Specs) == 0 {
					continue
				}

				var typename string
				typ := d.Specs[0].(*ast.ValueSpec).Type
				if typ == nil {
					continue
				}
				if id, ok := typ.(*ast.Ident); ok {
					typename = id.Name
				}
				if typename != "ʘUnaryOperatorType" {
					continue
				}

				for _, spec := range d.Specs {
					unaryName := spec.(*ast.ValueSpec).Names[0].Name
					if unaryName == "maxʘUnaryOperator" {
						continue
					}
					unaryNames = append(unaryNames, unaryName)
				}
			}
		default:
		}
	}

	outFileName := path.Join(gorgonialoc, unaryOut)
	outFile, err := os.OpenFile(outFileName, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatal(err)
	}
	defer outFile.Close()

	fmt.Fprintf(outFile, "package gorgonia\n\n%v\n\n", genmsg)
	for _, v := range unaryNames {
		apiName := strings.Title(strings.TrimSuffix(v, "OpType"))
		// legacy issue
		if apiName == "Ln" {
			apiName = "Log"
		}
		data := struct{ FnName, OpType string }{apiName, v}
		unaryTemplate.Execute(outFile, data)
	}

}

func main() {
	generateUnary()
}
